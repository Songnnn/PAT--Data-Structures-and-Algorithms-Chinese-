#include<bits/stdc++.h>
using namespace std;

/*
思路：两颗树的任一对相同节点（即相同字母的节点）
有相同的孩子结点就说明是同构
*/

//初始化树
void init(char *A,int AA[][2],int &x) 
{
    int n;
    scanf("%d",&n);
    getchar();
    x=n;
    for( int i=0 ; i<n ; i++ )
    {
        char a,b,c;
        scanf("%c %c %c",&a,&b,&c);
        getchar();
        A[i]=a;
        if( b!='-' ) AA[i][0]=(int)(b)-48;
        if( c!='-' ) AA[i][1]=(int)(c)-48;
    }
}

//孩子结点是否相同
int sameChildren(int i,int j,char *A,char *B,int AA[][2],int BB[][2]) 
{
    int Achild=0,Bchild=0;
    if( AA[i][0]!=-1 ) Achild++;
    if( AA[i][1]!=-1 ) Achild++;
    if( BB[j][0]!=-1 ) Bchild++;
    if( BB[j][1]!=-1 ) Bchild++;

    if( Achild==Bchild ) //孩子结点数相同
    {
        if( Achild==0 ) return 1;
        else if( Achild==1 )
        {
            if( AA[i][0]!=-1 )
            {
                if( A[AA[i][0]]==B[BB[j][0]] || A[AA[i][0]]==B[BB[j][1]]) return 1;
            }
            if( AA[i][1]!=-1 )
            {
                if( A[AA[i][1]]==B[BB[j][0]] || A[AA[i][1]]==B[BB[j][1]]) return 1;
            }
        }
        else if( Achild==2 )
        {
            if( A[AA[i][0]]==B[BB[j][0]] || A[AA[i][0]]==B[BB[j][1]] )
            {
                if( A[AA[i][1]]==B[BB[j][0]] || A[AA[i][1]]==B[BB[j][1]] ) return 1;
            }
        }
    }
    return 0;
}


int main()
{
    char A[10]; //存放第一颗树的节点字母
    char B[10]; //存放第二颗树的节点字母
    fill(A,A+10,'\0');
    fill(B,B+10,'\0');
    int AA[10][2]; //存放左右孩子的结点编号
    int BB[10][2]; //存放左右孩子的结点编号
    for( int i=0 ; i<10 ; i++ ) fill(AA[i],AA[i]+2,-1);
    for( int i=0 ; i<10 ; i++ ) fill(BB[i],BB[i]+2,-1);
    int n1,n2; //两颗树的结点数
    init(A,AA,n1);
    init(B,BB,n2);

    if( n1!=n2 ) //结点数不同
    {
        printf("No");
        return 0;
    }
    else if( n1==1 && n2==1 ) //防止出现结构相同字母不同的情况
    {
        if( A[0]!=B[0] ) 
        {
            printf("No");
            return 0;
        }
    }

    int tag=0;
    for( int i=0 ; i<n1 ; i++ )
    {
        for( int j=0 ; j<n1 ; j++ )
        {
            if( A[i]==B[j] ) //相同字母的结点，比较是否有相同的孩子结点
            {
                if( !sameChildren(i,j,A,B,AA,BB) )
                {
                    tag=1;
                    break;
                }
            }
        }
        if( tag==1 ) break;
    }

    if( tag==1 ) printf("No");
    else printf("Yes");

    return 0;
}
