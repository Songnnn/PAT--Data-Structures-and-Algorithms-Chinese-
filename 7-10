#include<bits/stdc++.h>
using namespace std;

/*
最小生成树问题
采用Prim算法，先判断是否为联通图
*/

#define noway -1

int A[1001][1001]; //邻接矩阵表示无向图
int tag[1001]={0}; //访问标志
vector<int> in; //存放最小生成树中的顶点
vector<int> out; //存放不在最小生成树中的顶点
int sum=0;

void del(int x)
{
    vector<int>::iterator i;
    //这里绝对不能将i++放到for循环中，否则会出现段错误
    //erase函数删除完之后，迭代器会自动指向被删元素的后面，如果再i++则会出现野指针
    //不删才能i++，删了之后不需再i++
    for( i=out.begin() ; i!=out.end() ; ) 
    {
        if( *i==x ) out.erase(i);
        else i++;
    }
}

int func()
{
    int mini=999999;
    int m=out[0]; //最短边属于out的顶点下标
    int flag=0; //判断该图是否联通
    for(  int i=0 ; i<in.size() ; i++ )
    {
        for( int j=0 ; j<out.size() ; j++ )
        {
            if( A[in[i]][out[j]]<mini && A[in[i]][out[j]]!=noway )
            {
                flag=1; //是联通图
                mini=A[in[i]][out[j]];
                m=j;
            }
        }
    }
    if( flag==0 ) return 0;
    sum+=mini;
    in.push_back(out[m]);
    del(out[m]);
    return 1;
}

int Prim(int n)
{
    //从顶点1开始构建
    in.push_back(1);
    del(1);
    int cnt=1;
    while( cnt!=n )
    {
        if( func()==1 ) cnt++;
        else break;
    }
    if( cnt==n ) return 1;
    return 0;
}

int main()
{
    int n,m;
    scanf("%d%d",&n,&m);
    for( int i=0 ; i<1001 ; i++ ) fill(A[i],A[i]+1001,noway);
    for( int i=0 ; i<m ; i++ )
    {
        int a,b,c;
        scanf("%d%d%d",&a,&b,&c);
        A[a][b]=A[b][a]=c;
    }

    for( int i=1 ; i<=n ; i++ ) out.push_back(i);
    if( Prim(n)==1 ) printf("%d",sum);
    else printf("-1");

    return 0;
}
