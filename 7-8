#include<bits/stdc++.h>
using namespace std;

/*
动物即为顶点，相应的转换魔咒长度即为相邻的边的权值。
如果这个无向图不连通，则输出0。
计算每个顶点到其他顶点的最短路径，然后挑出最大值。
从这n个顶点的最大值中挑出最小值，该顶点即为所求顶点。
*/

int A[101][101]; //用邻接矩阵来表示无向图
int tag[101]={0}; //访问标志

int getMinI(int i,int n,int *minWay)
{
    for( int j=1 ; j<=n ; j++ )
    {
        if( tag[j]==0 && minWay[j]<minWay[i] ) i=j;
    }
    return i;
}


int getMax(int i,int n) //Djs算法，得到顶点i到其他顶点的最短路径的最大值
{
    tag[i]=1;
    int minWay[n+1]; //存放顶点i到其他顶点的最短路径长度
    for( int j=1 ; j<=n ; j++ ) minWay[j]=A[i][j];
    for( int j=1 ; j<n ; j++ )
    {
        int imin=getMinI(i,n,minWay); //得到最近顶点的下标
        tag[imin]=1;
        for( int k=1 ; k<=n ; k++ )
        {
            if( tag[k]==0 && minWay[imin]+A[imin][k]<minWay[k] ) 
                minWay[k]=minWay[imin]+A[imin][k];
        }
    }
    minWay[i]=0;
    return *max_element(minWay+1,minWay+n+1);
}

int main()
{
    int n,m;
    scanf("%d %d",&n,&m);

    for( int i=0 ; i<101 ; i++ ) fill(A[i],A[i]+101,999999);
    for( int i=0 ; i<m ; i++ )
    {
        int a,b,c;
        scanf("%d %d %d",&a,&b,&c);
        A[a][b]=c;
        A[b][a]=c;
    }

    int Max[n+1];
    for( int i=1 ; i<=n ; i++ )
    {
        fill(tag,tag+101,0);
        Max[i]=getMax(i,n);
    }

    //判断该无向图是否联通
    int flag=0;
    for( int i=1 ; i<=n ; i++ )
    {
        if( Max[i]!=999999 ) flag=1;
    }
    if( flag==0 )
    {
        printf("0");
        return 0;
    }

    int imax=1;
    for( int i=2 ; i<=n ; i++ )
    {
        if( Max[i]<Max[imax] ) imax=i;
    }
    printf("%d %d",imax,Max[imax]);

    return 0;
}
